{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D7\\u05D9\\u05D0\\u05DC \\u05D3\\u05D4\\u05DF\\\\Desktop\\\\AniHelp\\\\Frontend\\\\anihelp\\\\src\\\\UserPortalComps\\\\account.js\",\n  _s = $RefreshSig$();\nimport NavbarOption from './navbar';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { visuallyHidden } from '@mui/utils';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\nconst rows = [createData('Cupcake', 305, 3.7, 67, 4.3), createData('Donut', 452, 25.0, 51, 4.9), createData('Eclair', 262, 16.0, 24, 6.0), createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Gingerbread', 356, 16.0, 49, 3.9), createData('Honeycomb', 408, 3.2, 87, 6.5), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Jelly Bean', 375, 0.0, 94, 0.0), createData('KitKat', 518, 26.0, 65, 7.0), createData('Lollipop', 392, 0.2, 98, 0.0), createData('Marshmallow', 318, 0, 81, 2.0), createData('Nougat', 360, 19.0, 9, 37.0), createData('Oreo', 437, 18.0, 63, 4.0)];\n\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function getComparator(order, orderBy) {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\n// const headCells = [\n//   {\n//     id: 'name',\n//     numeric: false,\n//     disablePadding: true,\n//     label: 'Product Name',\n//   },\n//   {\n//     id: 'Size',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Size',\n//   },\n//   {\n//     id: 'Animal',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Animal',\n//   },\n//   {\n//     id: 'Category',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Category',\n//   },\n//   {\n//     id: 'Description',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Description',\n//   },\n//   {\n//     id: 'Image',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Image',\n//   },\n// ];\n\n// function EnhancedTableHead(props) {\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n//     props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               'aria-label': 'select all desserts',\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : 'asc'}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// function EnhancedTableToolbar(props) {\n//   const { numSelected , itemsfordelete } = props;\n//   const handleDelete = async () => {\n//     const confirmed = window.confirm('Are you sure you want to delete the profile?');\n//     if (confirmed) {\n//       try {\n//         const authToken = localStorage.getItem('authToken');\n//         const response = await axios.delete('http://127.0.0.1:8000/myapp/item', {\n//           headers: {\n//             Authorization: `${authToken}`,\n//           },\n//           data: {\n//             items: itemsfordelete,\n//           },\n//         });\n//         if (response.status === 204) {\n//           console.log(response.data);\n//           // navigate('/');\n//         } else {\n//           throw new Error('Failed to delete the profile');\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n//   };\n\n//   const handleEdit = () => {\n//     // Perform delete operation\n\n//     console.log('Edit clicked');\n//   };\n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//           Nutrition\n//         </Typography>\n//       )}\n\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton onClick={handleDelete}>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <FilterListIcon />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//       <Tooltip title=\"Edit\">\n//         <IconButton onClick={handleEdit}>\n//         <EditIcon />\n//         </IconButton>\n//       </Tooltip>\n//     </Toolbar>\n//   );\n// }\n\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   itemsfordelete: PropTypes.array.isRequired,\n// };\n\n// export default function EnhancedTable() {\n//     const [order, setOrder] = useState('asc');\n//     const [orderBy, setOrderBy] = useState(headCells[0].id);\n//     const [selected, setSelected] = useState([]);\n//     const [page, setPage] = useState(0);\n//     const [dense, setDense] = useState(false);\n//     const [rowsPerPage, setRowsPerPage] = useState(5);\n//     const [items, setItems] = useState([]);\n//     const[itemsfordelete, setItemsForDelete] = useState([])\n\n//     useEffect(() => {\n//       const authToken = localStorage.getItem('authToken');\n//       axios\n//         .get('http://127.0.0.1:8000/myapp/items', {\n//           headers: {\n//             Authorization: `${authToken}`,\n//           },\n//         })\n//         .then((res) => {\n//           console.log(res.data);\n//           console.log(res.data.id);\n//           setItems(res.data);\n//         })\n//         .catch((error) => {\n//           console.error(error);\n//         });\n//     }, []);\n\n//     const handleRequestSort = (event, property) => {\n//       const isAsc = orderBy === property && order === 'asc';\n//       setOrder(isAsc ? 'desc' : 'asc');\n//       setOrderBy(property);\n//     };\n\n//     const handleSelectAllClick = (event) => {\n//       if (event.target.checked) {\n//         const newSelected = visibleRows.map((row) => row.id);\n//         setSelected(newSelected);\n//         setItemsForDelete(newSelected); // Add all items to itemsfordelete\n//       } else {\n//         setSelected([]);\n//         setItemsForDelete([]); // Clear the itemsfordelete array\n//       }\n//     };\n//     useEffect(() => {\n//       console.log(items);\n//     }, items);\n//     useEffect(() => {\n//       console.log(rows);\n//     }, rows);\n//     const handleClick = (event, id) => {\n//       const selectedIndex = selected.indexOf(id);\n//       let newSelected = [];\n\n//       if (selectedIndex === -1) {\n//         newSelected = newSelected.concat(selected, id);\n//         setItemsForDelete((prevItems) => [...prevItems, id]); // Add the item to itemsfordelete\n//       } else if (selectedIndex === 0) {\n//         newSelected = newSelected.concat(selected.slice(1));\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\n//       } else if (selectedIndex === selected.length - 1) {\n//         newSelected = newSelected.concat(selected.slice(0, -1));\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\n//       } else if (selectedIndex > 0) {\n//         newSelected = newSelected.concat(\n//           selected.slice(0, selectedIndex),\n//           selected.slice(selectedIndex + 1)\n//         );\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\n//       }\n\n//       setSelected(newSelected);\n//     };\n\n//     const handleChangePage = (event, newPage) => {\n//       setPage(newPage);\n//     };\n\n//     const handleChangeRowsPerPage = (event) => {\n//       setRowsPerPage(parseInt(event.target.value, 10));\n//       setPage(0);\n//     };\n\n//     const handleChangeDense = (event) => {\n//       setDense(event.target.checked);\n//     };\n\n//     const isSelected = (id) => selected.indexOf(id) !== -1;\n\n//     const emptyRows =\n//       page > 0 ? Math.max(0, (1 + page) * rowsPerPage - items.length) : 0;\n\n//     // const visibleRows = stableSort(items, getComparator(order, orderBy)).slice(\n//     //   page * rowsPerPage,\n//     //   page * rowsPerPage + rowsPerPage\n//     // );\n\n//     const visibleRows = React.useMemo(\n//       () =>\n//         stableSort(items, getComparator(order, orderBy)).slice(\n//           page * rowsPerPage,\n//           page * rowsPerPage + rowsPerPage,\n//         ),\n//       [order, orderBy, page, rowsPerPage],\n//     );\n\n//     return (\n//       <div>\n//         <NavbarOption />\n//         <Box sx={{ width: '100%' }}>\n//           <Paper sx={{ width: '100%', mb: 2 }}>\n//             <EnhancedTableToolbar numSelected={selected.length} itemsfordelete={itemsfordelete}/>\n//             <TableContainer>\n//               <Table\n//                 sx={{ minWidth: 750 }}\n//                 aria-labelledby=\"tableTitle\"\n//                 size={dense ? 'small' : 'medium'}\n//               >\n//                 <EnhancedTableHead\n//                   numSelected={selected.length}\n//                   order={order}\n//                   orderBy={orderBy}\n//                   onSelectAllClick={handleSelectAllClick}\n//                   onRequestSort={handleRequestSort}\n//                   rowCount={items.length}\n//                 />\n//                 <TableBody>\n//                   {visibleRows.map((row, index) => {\n//                     const isItemSelected = isSelected(row.id);\n//                     const labelId = `enhanced-table-checkbox-${index}`;\n\n//                     return (\n//                         <TableRow\n//                         hover\n//                         onClick={(event) => handleClick(event, row.id)}\n//                         role=\"checkbox\"\n//                         aria-checked={isItemSelected}\n//                         tabIndex={-1}\n//                         key={row.id}\n//                         selected={isItemSelected}\n//                         sx={{ cursor: 'pointer' }}\n//                       >\n//                         <TableCell padding=\"checkbox\">\n//                           <Checkbox\n//                             color=\"primary\"\n//                             checked={isItemSelected}\n//                             inputProps={{\n//                               'aria-labelledby': labelId,\n//                             }}\n//                           />\n//                         </TableCell>\n//                         <TableCell\n//                           component=\"th\"\n//                           id={labelId}\n//                           scope=\"row\"\n//                           padding=\"none\"\n//                         >\n//                           {row.item_name}\n//                         </TableCell>\n//                         <TableCell align=\"right\">{row.size}</TableCell>\n//                         <TableCell align=\"right\">{row.animal}</TableCell>\n//                         <TableCell align=\"right\">{row.category}</TableCell>\n//                         <TableCell align=\"right\">{row.description}</TableCell>\n//                         <TableCell align=\"right\">{row.image}</TableCell>\n//                       </TableRow>\n//                     );\n//                   })}\n//                   {emptyRows > 0 && (\n//                     <TableRow\n//                       style={{\n//                         height: (dense ? 33 : 53) * emptyRows,\n//                       }}\n//                     >\n//                       <TableCell colSpan={6} />\n//                     </TableRow>\n//                   )}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//             <TablePagination\n//               rowsPerPageOptions={[5, 10, 25]}\n//               component=\"div\"\n//               count={items.length}\n//               rowsPerPage={rowsPerPage}\n//               page={page}\n//               onPageChange={handleChangePage}\n//               onRowsPerPageChange={handleChangeRowsPerPage}\n//             />\n//           </Paper>\n//           <FormControlLabel\n//             control={<Switch checked={dense} onChange={handleChangeDense} />}\n//             label=\"Dense padding\"\n//           />\n//         </Box>\n//       </div>\n//     );\n//   }\n\nfunction Account() {\n  _s();\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const authToken = localStorage.getItem('authToken');\n    axios.get('http://127.0.0.1:8000/myapp/items', {\n      headers: {\n        Authorization: `${authToken}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      setItems(res.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavbarOption, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My List:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 5\n    }, this), items(0).data]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 493,\n    columnNumber: 5\n  }, this);\n}\n_s(Account, \"WQxLG0jSi8z/ovcvg+2h1VT9zGY=\");\n_c = Account;\nexport default Account;\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["NavbarOption","useEffect","useState","axios","React","PropTypes","alpha","Box","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","TableSortLabel","Toolbar","Typography","Paper","Checkbox","IconButton","Tooltip","FormControlLabel","Switch","DeleteIcon","FilterListIcon","visuallyHidden","EditIcon","jsxDEV","_jsxDEV","createData","name","calories","fat","carbs","protein","rows","Account","_s","items","setItems","authToken","localStorage","getItem","get","headers","Authorization","then","res","console","log","data","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/חיאל דהן/Desktop/AniHelp/Frontend/anihelp/src/UserPortalComps/account.js"],"sourcesContent":["import NavbarOption from './navbar';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return {\r\n    name,\r\n    calories,\r\n    fat,\r\n    carbs,\r\n    protein,\r\n  };\r\n}\r\n\r\nconst rows = [\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Donut', 452, 25.0, 51, 4.9),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n  createData('KitKat', 518, 26.0, 65, 7.0),\r\n  createData('Lollipop', 392, 0.2, 98, 0.0),\r\n  createData('Marshmallow', 318, 0, 81, 2.0),\r\n  createData('Nougat', 360, 19.0, 9, 37.0),\r\n  createData('Oreo', 437, 18.0, 63, 4.0),\r\n];\r\n\r\n// function descendingComparator(a, b, orderBy) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1;\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1;\r\n//   }\r\n//   return 0;\r\n// }\r\n\r\n// function getComparator(order, orderBy) {\r\n//   return order === 'desc'\r\n//     ? (a, b) => descendingComparator(a, b, orderBy)\r\n//     : (a, b) => -descendingComparator(a, b, orderBy);\r\n// }\r\n\r\n\r\n// function stableSort(array, comparator) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index]);\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = comparator(a[0], b[0]);\r\n//     if (order !== 0) {\r\n//       return order;\r\n//     }\r\n//     return a[1] - b[1];\r\n//   });\r\n//   return stabilizedThis.map((el) => el[0]);\r\n// }\r\n\r\n// const headCells = [\r\n//   {\r\n//     id: 'name',\r\n//     numeric: false,\r\n//     disablePadding: true,\r\n//     label: 'Product Name',\r\n//   },\r\n//   {\r\n//     id: 'Size',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Size',\r\n//   },\r\n//   {\r\n//     id: 'Animal',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Animal',\r\n//   },\r\n//   {\r\n//     id: 'Category',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Category',\r\n//   },\r\n//   {\r\n//     id: 'Description',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Description',\r\n//   },\r\n//   {\r\n//     id: 'Image',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Image',\r\n//   },\r\n// ];\r\n\r\n// function EnhancedTableHead(props) {\r\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n//     props;\r\n//   const createSortHandler = (property) => (event) => {\r\n//     onRequestSort(event, property);\r\n//   };\r\n\r\n//   return (\r\n//     <TableHead>\r\n//       <TableRow>\r\n//         <TableCell padding=\"checkbox\">\r\n//           <Checkbox\r\n//             color=\"primary\"\r\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//             checked={rowCount > 0 && numSelected === rowCount}\r\n//             onChange={onSelectAllClick}\r\n//             inputProps={{\r\n//               'aria-label': 'select all desserts',\r\n//             }}\r\n//           />\r\n//         </TableCell>\r\n//         {headCells.map((headCell) => (\r\n//           <TableCell\r\n//             key={headCell.id}\r\n//             align={headCell.numeric ? 'right' : 'left'}\r\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\r\n//             sortDirection={orderBy === headCell.id ? order : false}\r\n//           >\r\n//             <TableSortLabel\r\n//               active={orderBy === headCell.id}\r\n//               direction={orderBy === headCell.id ? order : 'asc'}\r\n//               onClick={createSortHandler(headCell.id)}\r\n//             >\r\n//               {headCell.label}\r\n//               {orderBy === headCell.id ? (\r\n//                 <Box component=\"span\" sx={visuallyHidden}>\r\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n//                 </Box>\r\n//               ) : null}\r\n//             </TableSortLabel>\r\n//           </TableCell>\r\n//         ))}\r\n//       </TableRow>\r\n//     </TableHead>\r\n//   );\r\n// }\r\n\r\n// EnhancedTableHead.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   onRequestSort: PropTypes.func.isRequired,\r\n//   onSelectAllClick: PropTypes.func.isRequired,\r\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n//   orderBy: PropTypes.string.isRequired,\r\n//   rowCount: PropTypes.number.isRequired,\r\n// };\r\n\r\n// function EnhancedTableToolbar(props) {\r\n//   const { numSelected , itemsfordelete } = props;\r\n//   const handleDelete = async () => {\r\n//     const confirmed = window.confirm('Are you sure you want to delete the profile?');\r\n//     if (confirmed) {\r\n//       try {\r\n//         const authToken = localStorage.getItem('authToken');\r\n//         const response = await axios.delete('http://127.0.0.1:8000/myapp/item', {\r\n//           headers: {\r\n//             Authorization: `${authToken}`,\r\n//           },\r\n//           data: {\r\n//             items: itemsfordelete,\r\n//           },\r\n//         });\r\n//         if (response.status === 204) {\r\n//           console.log(response.data);\r\n//           // navigate('/');\r\n//         } else {\r\n//           throw new Error('Failed to delete the profile');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleEdit = () => {\r\n//     // Perform delete operation\r\n    \r\n//     console.log('Edit clicked');\r\n//   };\r\n//   return (\r\n//     <Toolbar\r\n//       sx={{\r\n//         pl: { sm: 2 },\r\n//         pr: { xs: 1, sm: 1 },\r\n//         ...(numSelected > 0 && {\r\n//           bgcolor: (theme) =>\r\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n//         }),\r\n//       }}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography\r\n//           sx={{ flex: '1 1 100%' }}\r\n//           color=\"inherit\"\r\n//           variant=\"subtitle1\"\r\n//           component=\"div\"\r\n//         >\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography\r\n//           sx={{ flex: '1 1 100%' }}\r\n//           variant=\"h6\"\r\n//           id=\"tableTitle\"\r\n//           component=\"div\"\r\n//         >\r\n//           Nutrition\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton onClick={handleDelete}>\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton>\r\n//             <FilterListIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//       <Tooltip title=\"Edit\">\r\n//         <IconButton onClick={handleEdit}>\r\n//         <EditIcon />\r\n//         </IconButton>\r\n//       </Tooltip>\r\n//     </Toolbar>\r\n//   );\r\n// }\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   itemsfordelete: PropTypes.array.isRequired,\r\n// };\r\n\r\n// export default function EnhancedTable() {\r\n//     const [order, setOrder] = useState('asc');\r\n//     const [orderBy, setOrderBy] = useState(headCells[0].id);\r\n//     const [selected, setSelected] = useState([]);\r\n//     const [page, setPage] = useState(0);\r\n//     const [dense, setDense] = useState(false);\r\n//     const [rowsPerPage, setRowsPerPage] = useState(5);\r\n//     const [items, setItems] = useState([]);\r\n//     const[itemsfordelete, setItemsForDelete] = useState([])\r\n  \r\n//     useEffect(() => {\r\n//       const authToken = localStorage.getItem('authToken');\r\n//       axios\r\n//         .get('http://127.0.0.1:8000/myapp/items', {\r\n//           headers: {\r\n//             Authorization: `${authToken}`,\r\n//           },\r\n//         })\r\n//         .then((res) => {\r\n//           console.log(res.data);\r\n//           console.log(res.data.id);\r\n//           setItems(res.data);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(error);\r\n//         });\r\n//     }, []);\r\n  \r\n//     const handleRequestSort = (event, property) => {\r\n//       const isAsc = orderBy === property && order === 'asc';\r\n//       setOrder(isAsc ? 'desc' : 'asc');\r\n//       setOrderBy(property);\r\n//     };\r\n  \r\n//     const handleSelectAllClick = (event) => {\r\n//       if (event.target.checked) {\r\n//         const newSelected = visibleRows.map((row) => row.id);\r\n//         setSelected(newSelected);\r\n//         setItemsForDelete(newSelected); // Add all items to itemsfordelete\r\n//       } else {\r\n//         setSelected([]);\r\n//         setItemsForDelete([]); // Clear the itemsfordelete array\r\n//       }\r\n//     };\r\n//     useEffect(() => {\r\n//       console.log(items);\r\n//     }, items);\r\n//     useEffect(() => {\r\n//       console.log(rows);\r\n//     }, rows);\r\n//     const handleClick = (event, id) => {\r\n//       const selectedIndex = selected.indexOf(id);\r\n//       let newSelected = [];\r\n  \r\n//       if (selectedIndex === -1) {\r\n//         newSelected = newSelected.concat(selected, id);\r\n//         setItemsForDelete((prevItems) => [...prevItems, id]); // Add the item to itemsfordelete\r\n//       } else if (selectedIndex === 0) {\r\n//         newSelected = newSelected.concat(selected.slice(1));\r\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\r\n//       } else if (selectedIndex === selected.length - 1) {\r\n//         newSelected = newSelected.concat(selected.slice(0, -1));\r\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\r\n//       } else if (selectedIndex > 0) {\r\n//         newSelected = newSelected.concat(\r\n//           selected.slice(0, selectedIndex),\r\n//           selected.slice(selectedIndex + 1)\r\n//         );\r\n//         setItemsForDelete((prevItems) => prevItems.filter((item) => item !== id)); // Remove the item from itemsfordelete\r\n//       }\r\n  \r\n//       setSelected(newSelected);\r\n//     };\r\n  \r\n//     const handleChangePage = (event, newPage) => {\r\n//       setPage(newPage);\r\n//     };\r\n  \r\n//     const handleChangeRowsPerPage = (event) => {\r\n//       setRowsPerPage(parseInt(event.target.value, 10));\r\n//       setPage(0);\r\n//     };\r\n  \r\n//     const handleChangeDense = (event) => {\r\n//       setDense(event.target.checked);\r\n//     };\r\n  \r\n//     const isSelected = (id) => selected.indexOf(id) !== -1;\r\n  \r\n//     const emptyRows =\r\n//       page > 0 ? Math.max(0, (1 + page) * rowsPerPage - items.length) : 0;\r\n  \r\n//     // const visibleRows = stableSort(items, getComparator(order, orderBy)).slice(\r\n//     //   page * rowsPerPage,\r\n//     //   page * rowsPerPage + rowsPerPage\r\n//     // );\r\n\r\n//     const visibleRows = React.useMemo(\r\n//       () =>\r\n//         stableSort(items, getComparator(order, orderBy)).slice(\r\n//           page * rowsPerPage,\r\n//           page * rowsPerPage + rowsPerPage,\r\n//         ),\r\n//       [order, orderBy, page, rowsPerPage],\r\n//     );\r\n\r\n//     return (\r\n//       <div>\r\n//         <NavbarOption />\r\n//         <Box sx={{ width: '100%' }}>\r\n//           <Paper sx={{ width: '100%', mb: 2 }}>\r\n//             <EnhancedTableToolbar numSelected={selected.length} itemsfordelete={itemsfordelete}/>\r\n//             <TableContainer>\r\n//               <Table\r\n//                 sx={{ minWidth: 750 }}\r\n//                 aria-labelledby=\"tableTitle\"\r\n//                 size={dense ? 'small' : 'medium'}\r\n//               >\r\n//                 <EnhancedTableHead\r\n//                   numSelected={selected.length}\r\n//                   order={order}\r\n//                   orderBy={orderBy}\r\n//                   onSelectAllClick={handleSelectAllClick}\r\n//                   onRequestSort={handleRequestSort}\r\n//                   rowCount={items.length}\r\n//                 />\r\n//                 <TableBody>\r\n//                   {visibleRows.map((row, index) => {\r\n//                     const isItemSelected = isSelected(row.id);\r\n//                     const labelId = `enhanced-table-checkbox-${index}`;\r\n  \r\n//                     return (\r\n//                         <TableRow\r\n//                         hover\r\n//                         onClick={(event) => handleClick(event, row.id)}\r\n//                         role=\"checkbox\"\r\n//                         aria-checked={isItemSelected}\r\n//                         tabIndex={-1}\r\n//                         key={row.id}\r\n//                         selected={isItemSelected}\r\n//                         sx={{ cursor: 'pointer' }}\r\n//                       >\r\n//                         <TableCell padding=\"checkbox\">\r\n//                           <Checkbox\r\n//                             color=\"primary\"\r\n//                             checked={isItemSelected}\r\n//                             inputProps={{\r\n//                               'aria-labelledby': labelId,\r\n//                             }}\r\n//                           />\r\n//                         </TableCell>\r\n//                         <TableCell\r\n//                           component=\"th\"\r\n//                           id={labelId}\r\n//                           scope=\"row\"\r\n//                           padding=\"none\"\r\n//                         >\r\n//                           {row.item_name}\r\n//                         </TableCell>\r\n//                         <TableCell align=\"right\">{row.size}</TableCell>\r\n//                         <TableCell align=\"right\">{row.animal}</TableCell>\r\n//                         <TableCell align=\"right\">{row.category}</TableCell>\r\n//                         <TableCell align=\"right\">{row.description}</TableCell>\r\n//                         <TableCell align=\"right\">{row.image}</TableCell>\r\n//                       </TableRow>\r\n//                     );\r\n//                   })}\r\n//                   {emptyRows > 0 && (\r\n//                     <TableRow\r\n//                       style={{\r\n//                         height: (dense ? 33 : 53) * emptyRows,\r\n//                       }}\r\n//                     >\r\n//                       <TableCell colSpan={6} />\r\n//                     </TableRow>\r\n//                   )}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//             <TablePagination\r\n//               rowsPerPageOptions={[5, 10, 25]}\r\n//               component=\"div\"\r\n//               count={items.length}\r\n//               rowsPerPage={rowsPerPage}\r\n//               page={page}\r\n//               onPageChange={handleChangePage}\r\n//               onRowsPerPageChange={handleChangeRowsPerPage}\r\n//             />\r\n//           </Paper>\r\n//           <FormControlLabel\r\n//             control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n//             label=\"Dense padding\"\r\n//           />\r\n//         </Box>\r\n//       </div>\r\n//     );\r\n//   }\r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\nfunction Account() {\r\nconst[items,setItems] = useState([]);\r\nuseEffect(() => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    axios\r\n        .get('http://127.0.0.1:8000/myapp/items', {\r\n        headers: {\r\n            Authorization: `${authToken}`,\r\n        },\r\n    })\r\n    .then((res) => {\r\n        console.log(res.data);\r\n        setItems(res.data);\r\n    })\r\n    .catch((error) => {\r\n        console.error(error);\r\n    });\r\n      }, []);\r\n  return (\r\n    <div>\r\n    <NavbarOption />\r\n    <h1>My List:</h1>\r\n    {items(0).data}\r\n    {/* {items.map((item) => (\r\n      <div key={item.id}>\r\n      <ul> key={item.id} ,name:{item.item_name} Size: {item.size}, Animal: {item.animal}, Category: {item.category}, Description: {item.description}</ul>\r\n    </div>\r\n    ))} */}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Account;\r\n"],"mappings":"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CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAK,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EACpCD,SAAS,CAAC,MAAM;IACZ,MAAMwC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnDxC,KAAK,CACAyC,GAAG,CAAC,mCAAmC,EAAE;MAC1CC,OAAO,EAAE;QACLC,aAAa,EAAG,GAAEL,SAAU;MAChC;IACJ,CAAC,CAAC,CACDM,IAAI,CAAEC,GAAG,IAAK;MACXC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;MACrBX,QAAQ,CAACQ,GAAG,CAACG,IAAI,CAAC;IACtB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACA,CAAC,EAAE,EAAE,CAAC;EACV,oBACExB,OAAA;IAAAyB,QAAA,gBACAzB,OAAA,CAAC7B,YAAY;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChB7B,OAAA;MAAAyB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAChBnB,KAAK,CAAC,CAAC,CAAC,CAACY,IAAI;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAMV;AAER;AAACpB,EAAA,CA9BQD,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAgChB,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}