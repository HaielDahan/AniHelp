[{"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\index.js":"1","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\App.js":"2","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\reportWebVitals.js":"3","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\homepage.js":"4","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\signup.js":"5","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\loginpage.js":"6","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\profilepage.js":"7","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\account.js":"8","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\navbar.js":"9","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\userportal.js":"10","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\about.js":"11","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\itemetails.js":"12"},{"size":535,"mtime":1677599957612,"results":"13","hashOfConfig":"14"},{"size":1804,"mtime":1690465031009,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1677599957628,"results":"16","hashOfConfig":"14"},{"size":1885,"mtime":1689269856502,"results":"17","hashOfConfig":"14"},{"size":7718,"mtime":1690116100085,"results":"18","hashOfConfig":"14"},{"size":3180,"mtime":1690469730830,"results":"19","hashOfConfig":"14"},{"size":6608,"mtime":1689188765392,"results":"20","hashOfConfig":"14"},{"size":36456,"mtime":1690115136081,"results":"21","hashOfConfig":"14"},{"size":5729,"mtime":1690119889633,"results":"22","hashOfConfig":"14"},{"size":20859,"mtime":1690469078909,"results":"23","hashOfConfig":"14"},{"size":1922,"mtime":1689269759025,"results":"24","hashOfConfig":"14"},{"size":1554,"mtime":1690468894994,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1lept1i",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\index.js",[],[],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\App.js",["68","69"],[],"import './App.css';\nimport Homepage from './HomePageComponents/homepage';\nimport { BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport Loginpage from './HomePageComponents/loginpage';\nimport Signup from './HomePageComponents/signup';\nimport Userportalpage from './UserPortalComps/userportal';\nimport Profilepage from './UserPortalComps/profilepage';\nimport Account from './UserPortalComps/account';\nimport About from './HomePageComponents/about';\nimport ItemDetails from './UserPortalComps/itemetails';\n\n\nfunction App() {\n \n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route path=\"/login\" element={<Loginpage />} />\n          <Route path=\"/signup\" element={<Signup />} />\n          <Route path=\"/userportal\" element={<Userportalpage />} />\n          <Route path=\"/profile\" element = {<Profilepage />}/>\n          <Route path=\"/Myaccount\" element = {<Account />}/>\n          <Route path=\"/about\" element = {<About />}/>\n          <Route path=\"/item-details\" element = {<ItemDetails />}/>\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n{/*link Modal in ReactJS - Code a React Modal Tutorial using Hooks  */}\n{/*https://www.google.com/search?q=modal+overlay+react+hooks&rlz=1C1KNTJ_iwIL1033IL1033&sxsrf=AJOqlzWCsma98JFrQPEuW6ll51621elNHw%3A1678652794481&ei=ejUOZISLHc7AkgXkgJOYCA&oq=modal+overlay+react+h&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAxgAMgUIIRCgATIFCCEQoAEyBQghEKABMggIIRAWEB4QHTIICCEQFhAeEB0yCAghEBYQHhAdMggIIRAWEB4QHTIICCEQFhAeEB0yCAghEBYQHhAdMggIIRAWEB4QHToKCAAQRxDWBBCwAzoHCAAQsAMQQzoICAAQgAQQywE6BggAEBYQHjoICAAQFhAeEA86CAgAEAgQHhANSgQIQRgAUOgQWPZGYM9RaARwAXgAgAGcAYgBvgiSAQMwLjiYAQCgAQHIAQnAAQE&sclient=gws-wiz-serp#fpstate=ive&vld=cid:c3afeac9,vid:ZCvemsUfwPQ*/}","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\reportWebVitals.js",[],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\homepage.js",[],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\signup.js",["70","71","72","73"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport \"./signup.css\";\r\nimport { FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, TextField, Select, MenuItem, InputLabel } from '@mui/material';\r\n\r\n\r\nconst Signup = ({closeSignUpModal}) =>{\r\n  const[data, setData] = useState({username:'',email:''\r\n                                  ,password:'',password2:''\r\n                                  ,name:'',gender:''\r\n                                  ,age:'',place:''\r\n                                  ,prefix:'',phone:''});\r\n\r\n  const[err_message, setErrMessage] = useState('');\r\n  const[err_flag, setErrFlag] = useState(false);\r\n  \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    axios.post('http://127.0.0.1:8000/myapp/accounts', data)\r\n      .then(response => {\r\n        if (response.status === 201) {\r\n          // console.log(response.data);\r\n          setData({username:'', email:'', password:'', password2:'', name:'', gender:'', age:'', place:'', prefix:'', phone:''});\r\n          window.alert('The account was created successfully');\r\n          closeSignUpModal(false);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });  \r\n    }\r\n\r\n  const handleChange = (e, myKey) =>{\r\n    setData(prevdata=>({...prevdata, [myKey]:e.target.value}))    \r\n  }\r\n  useEffect(()=>{console.log(data)} ,[data])\r\n  \r\n\r\n    return (\r\n    <div>\r\n      <div className='sModalBackground'>\r\n        <div className='smodalContainer'>\r\n          <div className='stitle'>\r\n            <h1>Sign Up</h1>\r\n          </div>\r\n          <form className='form-container' onSubmit={handleSubmit}>\r\n            <label>\r\n            \r\n            <TextField id=\"demo-helper-text-aligned\" label=\"User name\" value={data.username} onChange={(e) => handleChange(e, 'username')} helperText=\"Please enter your name\" \r\n              style={{ position: \"absolute\", left: '10%', top: '10%', display: 'block', width: '50%' }}/>\r\n             {/*  <input type=\"text\" id=\"input1\" placeholder=\"Enter your user name\" value={data.username} onChange={(e)=>{handleChange(e,'username')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Email\" value={data.email} onChange={(e)=>{handleChange(e,'email')}} helperText=\"Please enter your email\" \r\n              style={{ position: \"absolute\", left: '37%', top: '10%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"email\" placeholder=\"Enter your email\" value={data.email} onChange={(e)=>{handleChange(e,'email')}} /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n            <TextField id=\"demo-helper-text-aligned\" label=\"Password\" value={data.password} onChange={(e)=>{handleChange(e,'password')}} helperText=\"Please enter your password\" \r\n              style={{ position: \"absolute\", left: '10%', top: '26%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"text\" placeholder=\"Enter your password\" value={data.password} onChange={(e)=>{handleChange(e,'password')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Confirm Password\" value={data.password2} onChange={(e)=>{handleChange(e,'password2')}} helperText=\"Please Confirm your password\" \r\n              style={{ position: \"absolute\", left: '37%', top: '26%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"text\" placeholder=\"Enter your password agin\" value={data.password2} onChange={(e)=>{handleChange(e,'password2')}} /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n            <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Name\" value={data.name} onChange={(e)=>{handleChange(e,'name')}} helperText=\"Please enter your Name\" \r\n              style={{ position: \"absolute\", left: '64%', top: '10%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"text\" placeholder=\"Enter your name\" value={data.name} onChange={(e)=>{handleChange(e,'name')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label> \r\n            <FormControl component=\"fieldset\" style={{ position: \"absolute\", left: '10%', top: '39%', display: 'block', width: '50%' }}>\r\n              <FormLabel component=\"legend\">Gender</FormLabel>\r\n              <RadioGroup row aria-label=\"gender\" name=\"gender\" value={data.gender} onChange={(e)=>{handleChange(e,'gender')}}>\r\n                <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n                <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n                <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n              </RadioGroup> \r\n            </FormControl>\r\n              {/* <input type=\"text\" placeholder=\"Enter your gender\" value={data.gender}onChange={(e)=>{handleChange(e,'gender')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Age\" value={data.age} onChange={(e)=>{handleChange(e,'age')}} helperText=\"Please enter your Age\" \r\n              style={{ position: \"absolute\", left: '10%', top: '53%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"text\" placeholder=\"Enter your age\" value={data.age} onChange={(e)=>{handleChange(e,'age')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Place\" value={data.place} onChange={(e)=>{handleChange(e,'place')}} helperText=\"Please enter your Place\" \r\n              style={{ position: \"absolute\", left: '37%', top: '53%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"text\" placeholder=\"Enter your place\" value={data.place} onChange={(e)=>{handleChange(e,'place')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n               \r\n            <FormControl fullWidth style={{ position: \"absolute\", left: '10%', top: '68%', display: 'block', width: '50%' }}>\r\n              <InputLabel id=\"demo-simple-select-label\">prefix</InputLabel>\r\n              <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" label=\"Prefix\" value={data.prefix} onChange={(e)=>{handleChange(e,'prefix')}}>\r\n              <MenuItem value=\"050\">050</MenuItem>\r\n              <MenuItem value=\"052\">052</MenuItem>\r\n              <MenuItem value=\"053\">053</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n               \r\n              {/* <input type=\"tel\" placeholder=\"Enter your prefix\" value={data.prefix} onChange={(e)=>{handleChange(e,'prefix')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <label>\r\n              <TextField id=\"demo-helper-text-aligned-no-helper\" label=\"Phone\" value={data.phone} onChange={(e)=>{handleChange(e,'phone')}} helperText=\"Please enter your Phone\" \r\n              style={{ position: \"absolute\", left: '37%', top: '68%', display: 'block', width: '50%' }}/>\r\n              {/* <input type=\"tel\" placeholder=\"Enter your phone\" value={data.phone} onChange={(e)=>{handleChange(e,'phone')}}  /> */}\r\n            </label>\r\n            <br />\r\n            <button className='submitSBtn' type=\"submit\">Submit</button>\r\n          </form>\r\n          <div className='cancelSBtn'>\r\n            <button onClick={()=>closeSignUpModal(false)}>cancel</button>\r\n            {/* <button onClick={()=>navigate(\"/\")}>Back Home</button> */}\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n\r\n\r\n // let navigate = useNavigate();","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\loginpage.js",["74","75"],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\profilepage.js",["76","77"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport back from '../photos/back3.jpg';\r\nimport NavbarOption from './navbar';\r\nimport { Navbar } from 'react-bootstrap';\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    height: '100vh',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.5)', // Adjust the alpha value as needed\r\n  },\r\n  background: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 250,\r\n    width: '70%',\r\n    height: '100%',\r\n    backgroundImage: `url(${back})`,\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n    opacity: 0.5, // Adjust the opacity value as needed\r\n  },\r\n};\r\n\r\n\r\nfunction Profilepage() {\r\n  const [personprofile, setPersonProfile] = useState({});\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [titlename, setTitleName] = useState('')\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    axios\r\n      .get('http://127.0.0.1:8000/myapp/account', {\r\n        headers: {\r\n          Authorization: `${authToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setTitleName(res.data['name']);\r\n        setPersonProfile(res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleFieldChange = (field, value) => {\r\n    setPersonProfile((prevProfile) => ({\r\n      ...prevProfile,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const updatedData = {\r\n        name: personprofile.name,\r\n        gender: personprofile.gender,\r\n        age: personprofile.age,\r\n        place: personprofile.place,\r\n        prefix: personprofile.prefix,\r\n        phone : personprofile.phone\r\n      };\r\n      const authToken = localStorage.getItem('authToken');\r\n      const response = await axios.put('http://127.0.0.1:8000/myapp/account/', updatedData, {\r\n      headers: {\r\n      Authorization: `${authToken}`,\r\n      },\r\n      });\r\n      if (response.status === 200) {\r\n        setTitleName(response.data['name'])\r\n        setIsEditing(false);\r\n      } else {\r\n        throw new Error('Failed to save the profile');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  const handleDelete = async () => {\r\n    const confirmed = window.confirm('Are you sure you want to delete the profile?');\r\n    if (confirmed) {\r\n      try {\r\n        const authToken = localStorage.getItem('authToken');\r\n        const response = await axios.delete('http://127.0.0.1:8000/myapp/account/', {\r\n          headers: {\r\n            Authorization: `${authToken}`,\r\n          },\r\n        });\r\n        if (response.status === 204) {\r\n          console.log(response.data)\r\n          navigate('/');\r\n        } else {\r\n          throw new Error('Failed to delete the profile');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <NavbarOption/>\r\n      <div style={{ dislay: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n      <h1>{titlename}</h1>\r\n      <ul>\r\n      <p>\r\n        Name: {isEditing ? (\r\n          <input\r\n            type=\"text\"\r\n            value={personprofile.name}\r\n            onChange={(e) => handleFieldChange('name', e.target.value)}\r\n          />\r\n        ) : (\r\n          personprofile.name\r\n        )}\r\n      </p>\r\n      </ul>\r\n      <ul>\r\n      <p>\r\n        Gender: {isEditing ? (\r\n          <input\r\n            type=\"text\"\r\n            value={personprofile.gender}\r\n            onChange={(e) => handleFieldChange('gender', e.target.value)}\r\n          />\r\n        ) : (\r\n          personprofile.gender\r\n        )}\r\n      </p>\r\n      </ul>\r\n      <ul>\r\n      <p>\r\n        Age: {isEditing ? (\r\n          <input\r\n            type=\"text\"\r\n            value={personprofile.age}\r\n            onChange={(e) => handleFieldChange('age', e.target.value)}\r\n          />\r\n        ) : (\r\n          personprofile.age\r\n        )}\r\n      </p>\r\n      </ul>\r\n      <ul>\r\n      <p>\r\n        Residence: {isEditing ? (\r\n          <input\r\n            type=\"text\"\r\n            value={personprofile.place}\r\n            onChange={(e) => handleFieldChange('place', e.target.value)}\r\n          />\r\n        ) : (\r\n          personprofile.place\r\n        )}\r\n      </p>\r\n      </ul>\r\n      <ul>\r\n      <p>\r\n        Phone number: {isEditing ? (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              value={personprofile.prefix}\r\n              onChange={(e) => handleFieldChange('prefix', e.target.value)}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              value={personprofile.phone}\r\n              onChange={(e) => handleFieldChange('phone', e.target.value)}\r\n            />\r\n          </>\r\n        ) : (\r\n          personprofile.prefix + personprofile.phone\r\n        )}\r\n      </p>\r\n      </ul>\r\n      {isEditing ? (\r\n        <>\r\n        <button onClick={handleSave}>Save</button>\r\n        <button onClick={handleCancelEdit}>cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n        <button onClick={handleEdit}>Edit</button>\r\n        <button onClick={handleDelete}>Delete</button>\r\n        <button onClick={() => navigate('/userportal')}>Back</button>\r\n        </>\r\n      )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profilepage;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function Profilepage() {\r\n//   const [personprofile, setPersonProfile] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     const authToken = localStorage.getItem('authToken');\r\n//     axios\r\n//       .get('http://127.0.0.1:8000/myapp/account', {\r\n//         headers: {\r\n//           Authorization: `${authToken}`,\r\n//         },\r\n//       })\r\n//       .then((res) => {\r\n//         setPersonProfile(res.data);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(error);\r\n//       });\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//       <h1>{personprofile.name}</h1>\r\n//       <p>Name: {personprofile.name}</p>\r\n//       <p>Gender: {personprofile.gender}</p>\r\n//       <p>Age: {personprofile.age}</p>\r\n//       <p>Residence: {personprofile.place}</p>\r\n//       <p>Phone number: {personprofile.prefix}{personprofile.phone}</p>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Profilepage;\r\n","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\account.js",["78","79"],[],"import NavbarOption from './navbar';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport TextField from '@mui/material/TextField';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport \"./account.css\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  // other Material-UI imports...\r\n} from '@mui/material';  \r\n/// ****It will remain for me to arrange the addition of products and editing of products and correct the sorting*****\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) {\r\n      return order;\r\n    }\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'name',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Product Name',\r\n  },\r\n  {\r\n    id: 'Size',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Size',\r\n  },\r\n  {\r\n    id: 'Animal',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Animal',\r\n  },\r\n  {\r\n    id: 'Category',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Category',\r\n  },\r\n  {\r\n    id: 'Description',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Description',\r\n  },\r\n  {\r\n    id: 'Image',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Image',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n    props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts',\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction EnhancedTableToolbar(props) {\r\n  const { numSelected, itemsfordelete, onAddClick } = props;\r\n  const handleDelete = async () => {\r\n    const confirmed = window.confirm('Are you sure you want to delete this item?');\r\n    if (confirmed) {\r\n      try {\r\n        const authToken = localStorage.getItem('authToken');\r\n        const response = await axios.delete('http://127.0.0.1:8000/myapp/item', {\r\n          headers: {\r\n            Authorization: `${authToken}`,\r\n          },\r\n          data: {\r\n            items: itemsfordelete,\r\n          },\r\n        });\r\n        if (response.status === 204) {\r\n          window.location.reload();\r\n        } else {\r\n          throw new Error('Failed to delete the profile');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  const handleAdd = () => {\r\n    // Call the onAddClick callback from props\r\n    if (onAddClick) {\r\n      onAddClick();\r\n    }\r\n  };\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n        }),\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          List of products\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton onClick={handleDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : null}\r\n      <Tooltip title=\"Add\">\r\n        <IconButton onClick={handleAdd}>\r\n        <AddIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </Toolbar>\r\n  );\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  itemsfordelete: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function EnhancedTable() {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState(headCells[0].id);\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [items, setItems] = useState([]);\r\n  const [itemsForDelete, setItemsForDelete] = useState([]);\r\n  const [editingCells, setEditingCells] = useState({});\r\n  const [originalValues, setOriginalValues] = useState({});\r\n  const [file, setFile] = useState();\r\n  const [categoryOptions, setCategoryOptions] = useState([]);\r\n  const [animalOptions, setAnimalOptions] = useState([]);\r\n  const [sizeOptions, setSizeOptions] = useState([]);\r\n  \r\n  \r\n  const back_styles = {\r\n    container: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      height: '10vh',\r\n      padding: '0 20px',\r\n    },\r\n    backButton: {\r\n      padding: '10px',\r\n      backgroundColor: 'white',\r\n      color: 'blue',\r\n      border: 'none',\r\n      cursor: 'pointer',\r\n      marginRight: '20px', // Add margin to the right to create space between back button and title\r\n    },\r\n    title: {\r\n      marginLeft: '35%', // Adjust the value as per your preference to move the title to the left\r\n      flexGrow: 1, // This makes the title occupy the remaining space and pushes the back button to the left side\r\n      textAlign: 'left', // You can align the text to the left or center based on your preference\r\n    },\r\n  };\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n  const [newProduct, setNewProduct] = useState({\r\n    // item_name: '',\r\n    // size: '',\r\n    // animal: '',\r\n    // category: '',\r\n    // description: '',\r\n    // image: '',\r\n  });\r\n\r\n  const handleAdd = () => {\r\n    // Reset newProduct state to represent a new row\r\n    setNewProduct({\r\n      item_name: '',\r\n      size: '',\r\n      animal: '',\r\n      category: '',\r\n      description: '',\r\n      image: 'null',\r\n    });\r\n  };\r\n\r\n  const handleSaveNewProduct = async () => {\r\n    const newProductWithId = { id: generateUniqueId(), ...newProduct };\r\n    const confirmed = window.confirm('Are you sure you want to save the changes?');\r\n  \r\n    if (confirmed) {\r\n      if (newProductWithId) {\r\n        try {\r\n          const formData = new FormData();\r\n          formData.append('id', newProductWithId.id);\r\n          formData.append('item_name', newProductWithId.item_name);\r\n          formData.append('size', newProductWithId.size);\r\n          formData.append('animal', newProductWithId.animal);\r\n          formData.append('category', newProductWithId.category);\r\n          formData.append('description', newProductWithId.description);\r\n  \r\n          // Append the 'image' file data if it exists\r\n          if (newProductWithId.image !== 'null') {\r\n            console.log(\"i am here 1\");\r\n            console.log(\"i am here 1 : \", newProductWithId.image );\r\n            formData.append('image', newProductWithId.image, newProductWithId.image.name);\r\n          }\r\n          else{\r\n            console.log(\"i am here 2\");\r\n            formData.append('image','null')\r\n          }\r\n  \r\n          const authToken = localStorage.getItem('authToken');\r\n          const response = await axios.post(\r\n            'http://127.0.0.1:8000/myapp/items',\r\n            formData,\r\n            {\r\n              headers: {\r\n                Authorization: authToken,\r\n                'Content-Type': 'multipart/form-data', // Make sure to set the correct content type\r\n              },\r\n            }\r\n          );\r\n  \r\n          if (response.status === 201) {\r\n            console.log(\"this is the data:\", response.data);\r\n            window.location.reload();\r\n          } else {\r\n            throw new Error('Failed to change this item');\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    }\r\n    setNewProduct({}); // Reset newProduct state\r\n  };\r\n  \r\n\r\n\r\n  const handleCancelAdd = () => {\r\n    // Reset newProduct state to remove the new row\r\n    setNewProduct({});\r\n  };\r\n\r\n  // Generate a unique ID for the new product\r\n  const generateUniqueId = () => {\r\n    return Math.floor(Math.random() * 100000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    axios\r\n      .get('http://127.0.0.1:8000/myapp/items', {\r\n        headers: {\r\n          Authorization: `${authToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        console.log(res.data.id);\r\n        setItems(res.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelected = visibleRows.map((row) => row.id);\r\n      setSelected(newSelected);\r\n      setItemsForDelete(newSelected); // Add all items to itemsForDelete\r\n    } else {\r\n      setSelected([]);\r\n      setItemsForDelete([]); // Clear the itemsForDelete array\r\n    }\r\n  };\r\n  \r\n\r\n  const handleClick = (event, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n      setItemsForDelete((prevItems) => [...prevItems, id]); // Add the item to itemsForDelete\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n      setItemsForDelete((prevItems) =>\r\n        prevItems.filter((item) => item !== id)\r\n      ); // Remove the item from itemsForDelete\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n      setItemsForDelete((prevItems) =>\r\n        prevItems.filter((item) => item !== id)\r\n      ); // Remove the item from itemsForDelete\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n      setItemsForDelete((prevItems) =>\r\n        prevItems.filter((item) => item !== id)\r\n      ); // Remove the item from itemsForDelete\r\n    }\r\n\r\n    setSelected(newSelected);\r\n    // console.log('Selected:', newSelected);\r\n    // console.log('Items For Delete:', itemsForDelete);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n  useEffect(() => {\r\n    console.log(originalValues); // Log the value of originalValues\r\n    // ...\r\n  }, [originalValues]);\r\n  const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - items.length) : 0;\r\n\r\n  const visibleRows = stableSort(items, getComparator(order, orderBy)).slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleEditRow = (id) => {\r\n    const updatedEditingCells = { ...editingCells };\r\n    updatedEditingCells[id] = true;\r\n    setEditingCells(updatedEditingCells);\r\n  \r\n    // Store the original values of the edited cells\r\n    const editedRow = visibleRows.find((row) => row.id === id);\r\n    const originalRowValues = {\r\n      item_name: editedRow.item_name,\r\n      size: editedRow.size,\r\n      animal: editedRow.animal,\r\n      category: editedRow.category,\r\n      description: editedRow.description,\r\n      image: editedRow.image,\r\n    };\r\n    setOriginalValues((prevOriginalValues) => ({\r\n      ...prevOriginalValues,\r\n      [id]: originalRowValues,\r\n    }));\r\n  };\r\n\r\n  const handleSaveRow = (id) => {\r\n    const confirmed = window.confirm('Are you sure you want to save the changes?');\r\n    if (confirmed) {\r\n      const updatedItem = items.find((item) => item.id === id);\r\n      if (updatedItem) {\r\n        const formData = new FormData();\r\n        formData.append('id', id); // Append the 'id' directly\r\n  \r\n        formData.append('item_name', updatedItem.item_name);\r\n        formData.append('size', updatedItem.size);\r\n        formData.append('animal', updatedItem.animal);\r\n        formData.append('category', updatedItem.category);\r\n        formData.append('description', updatedItem.description);\r\n         // Append the 'image' data properly\r\n      if (file) {\r\n        formData.append('image', file, file.name);\r\n      } else {\r\n        formData.append('image', updatedItem.image);\r\n      }\r\n  \r\n        const authToken = localStorage.getItem('authToken');\r\n        axios\r\n          .put(`http://127.0.0.1:8000/myapp/item`, formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n              Authorization: authToken,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.status === 204) {\r\n              window.location.reload();\r\n            } else {\r\n              throw new Error('Failed to change this item');\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n\r\n  \r\n\r\n  const handleExitEdit = (id) => {\r\n    const updatedEditingCells = { ...editingCells };\r\n    updatedEditingCells[id] = false;\r\n    setEditingCells(updatedEditingCells);\r\n\r\n    // Restore the original values of the edited cells\r\n    const originalRowValues = originalValues[id];\r\n    if (originalRowValues) {\r\n      const updatedItems = items.map((item) =>\r\n        item.id === id ? { ...item, ...originalRowValues } : item\r\n      );\r\n      setItems(updatedItems);\r\n    }\r\n  };\r\n\r\n  // const handleCellChange = (event, id) => {\r\n  //   const { name, value, files } = event.target;\r\n  //   const updatedItems = items.map((item) =>\r\n  //     item.id === id ? { ...item, [name]: value || files[0] } : item\r\n  //   );\r\n  //   setItems(updatedItems);\r\n  // };\r\n\r\n\r\n  const handleCellChange = (event, id) => {\r\n    const { name, value, files } = event.target;\r\n    const updatedItems = items.map((item) =>\r\n      item.id === id ? { ...item, [name]: value } : item // Spread the entire item object\r\n    );\r\n    setItems(updatedItems);\r\n    // Update the 'file' state only if a new image is selected\r\n    if (files && files.length > 0) {\r\n      setFile(files[0]);\r\n    }\r\n  };\r\n  \r\n  \r\n  useEffect(() => {\r\n    axios.get('http://127.0.0.1:8000/myapp/category-options', {\r\n    })\r\n      .then(res => {\r\n        // console.log(res.data)\r\n        setCategoryOptions(res.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://127.0.0.1:8000/myapp/animals-options/', {\r\n    })\r\n      .then(res => {\r\n        // console.log(\"animal:\",res.data)\r\n        setAnimalOptions(res.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get('http://127.0.0.1:8000/myapp/size-options/', {\r\n    })\r\n      .then(res => {\r\n        // console.log(res.data)\r\n        setSizeOptions(res.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  const navigate = useNavigate();\r\n  \r\n\r\nreturn (\r\n  <div>\r\n    <NavbarOption />\r\n    <Box sx={back_styles.container} >\r\n    <button style={back_styles.backButton} onClick={() => navigate('/userportal')}>\r\n        Back\r\n      </button>\r\n      <div style={back_styles.title}>\r\n      <h1>Personal Area</h1>\r\n      </div>\r\n    </Box>\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar\r\n          numSelected={selected.length}\r\n          itemsfordelete={itemsForDelete}\r\n          onAddClick={handleAdd}// Pass the handleAdd function to the toolbar\r\n        />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={items.length}\r\n            />\r\n            <TableBody>\r\n              {/* Render the new row with input fields */}\r\n              {Object.keys(newProduct).length > 0 && (\r\n                <TableRow>\r\n                  <TableCell padding=\"checkbox\" />\r\n                  <TableCell>\r\n                    <TextField\r\n                      name=\"item_name\"\r\n                      value={newProduct.item_name}\r\n                      onChange={(event) => setNewProduct({ ...newProduct, item_name: event.target.value })}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                  <FormControl fullWidth variant=\"outlined\">\r\n                        <InputLabel id={`size-label-${newProduct.id}`}>Size</InputLabel>\r\n                        <Select\r\n                          labelId={`size-label-${newProduct.id}`}\r\n                          name=\"size\"\r\n                          value={newProduct.size}\r\n                          onChange={(event) => setNewProduct({ ...newProduct, size: event.target.value })}\r\n                          label=\"size\"\r\n                        >\r\n                          {Object.entries(sizeOptions).map(([key, value]) => (\r\n                          <MenuItem key={key} value={value}>\r\n                          {value}\r\n                          </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    \r\n                    {/* <TextField\r\n                      name=\"size\"\r\n                      value={newProduct.size}\r\n                      onChange={(event) => setNewProduct({ ...newProduct, size: event.target.value })}\r\n                    /> */}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                  <FormControl fullWidth variant=\"outlined\">\r\n                      <InputLabel id={`animal-label-${newProduct.id}`}>Animal</InputLabel>\r\n                      <Select\r\n                        labelId={`animal-label-${newProduct.id}`}\r\n                        name=\"animal\"\r\n                        value={newProduct.animal}\r\n                        onChange={(event) => setNewProduct({ ...newProduct, animal: event.target.value })}\r\n                        label=\"animal\"\r\n                      >\r\n                        {Object.entries(animalOptions).map(([key, value]) => (\r\n                        <MenuItem key={key} value={value}>\r\n                        {value}\r\n                        </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                    \r\n                    \r\n                    {/* <TextField\r\n                      name=\"animal\"\r\n                      value={newProduct.animal}\r\n                      onChange={(event) => setNewProduct({ ...newProduct, animal: event.target.value })}\r\n                    /> */}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                  <FormControl fullWidth variant=\"outlined\">\r\n                      <InputLabel id={`category-label-${newProduct.id}`}>Category</InputLabel>\r\n                      <Select\r\n                        labelId={`category-label-${newProduct.id}`}\r\n                        name=\"category\"\r\n                        value={newProduct.category}\r\n                        onChange={(event) => setNewProduct({ ...newProduct, category: event.target.value })}\r\n                        label=\"category\"\r\n                      >\r\n                        {Object.entries(categoryOptions).map(([key, value]) => (\r\n                        <MenuItem key={key} value={value}>\r\n                        {value}\r\n                        </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  \r\n                    {/* <TextField\r\n                      name=\"category\"\r\n                      value={newProduct.category}\r\n                      onChange={(event) => setNewProduct({ ...newProduct, category: event.target.value })}\r\n                    /> */}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <TextField\r\n                      name=\"description\"\r\n                      value={newProduct.description}\r\n                      onChange={(event) => setNewProduct({ ...newProduct, description: event.target.value })}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      onChange={(event) => setNewProduct({ ...newProduct, image: event.target.files[0] })}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <IconButton onClick={handleCancelAdd}>\r\n                      <CancelIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={handleSaveNewProduct}>\r\n                      <SaveIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n\r\n              {/* Render the existing rows */}\r\n              {visibleRows.map((row, index) => (\r\n                <TableRow\r\n                  hover\r\n                  onClick={(event) => handleClick(event, row.id)}\r\n                  role=\"checkbox\"\r\n                  aria-checked={isSelected(row.id)}\r\n                  tabIndex={-1}\r\n                  key={row.id}\r\n                  selected={isSelected(row.id)}\r\n                  sx={{ cursor: 'pointer' }}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      color=\"primary\"\r\n                      checked={isSelected(row.id)}\r\n                      inputProps={{\r\n                        'aria-labelledby': `enhanced-table-checkbox-${index}`,\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell\r\n                    component=\"th\"\r\n                    id={`enhanced-table-checkbox-${index}`}\r\n                    scope=\"row\"\r\n                    padding=\"none\"\r\n                  >\r\n                    {editingCells[row.id] ? (\r\n                      <TextField\r\n                        name=\"item_name\"\r\n                        value={row.item_name}\r\n                        onChange={(event) => handleCellChange(event, row.id)}\r\n                      />\r\n                    ) : (\r\n                      row.item_name\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                        <FormControl fullWidth variant=\"outlined\">\r\n                        <InputLabel id={`size-label-${row.id}`}>Size</InputLabel>\r\n                        <Select\r\n                          labelId={`size-label-${row.id}`}\r\n                          name=\"size\"\r\n                          value={row.size}\r\n                          onChange={(event) => handleCellChange(event, row.id)}\r\n                          label=\"size\"\r\n                        >\r\n                          {Object.entries(sizeOptions).map(([key, value]) => (\r\n                          <MenuItem key={key} value={value}>\r\n                          {value}\r\n                          </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    ) : (\r\n                      row.size\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                      <FormControl fullWidth variant=\"outlined\">\r\n                      <InputLabel id={`animal-label-${row.id}`}>Animal</InputLabel>\r\n                      <Select\r\n                        labelId={`animal-label-${row.id}`}\r\n                        name=\"animal\"\r\n                        value={row.animal}\r\n                        onChange={(event) => handleCellChange(event, row.id)}\r\n                        label=\"animal\"\r\n                      >\r\n                        {Object.entries(animalOptions).map(([key, value]) => (\r\n                        <MenuItem key={key} value={value}>\r\n                        {value}\r\n                        </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                    ) : (\r\n                      row.animal\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                      <FormControl fullWidth variant=\"outlined\">\r\n                      <InputLabel id={`category-label-${row.id}`}>Category</InputLabel>\r\n                      <Select\r\n                        labelId={`category-label-${row.id}`}\r\n                        name=\"category\"\r\n                        value={row.category}\r\n                        onChange={(event) => handleCellChange(event, row.id)}\r\n                        label=\"Category\"\r\n                      >\r\n                        {Object.entries(categoryOptions).map(([key, value]) => (\r\n                        <MenuItem key={key} value={value}>\r\n                        {value}\r\n                        </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                    ) : (\r\n                      row.category\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                      <TextField\r\n                        name=\"description\"\r\n                        value={row.description}\r\n                        onChange={(event) => handleCellChange(event, row.id)}\r\n                      />\r\n                    ) : (\r\n                      row.description\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                      <>\r\n                        <input\r\n                          type=\"file\"\r\n                          accept=\"image/*\"\r\n                          onChange={(e) => handleCellChange(e, row.id)}\r\n                        />\r\n                      </>\r\n                    ) : (\r\n                      <img\r\n                        src={`http://127.0.0.1:8000${row.image}`}\r\n                        alt=\"img\"\r\n                        className=\"small-image\"\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {editingCells[row.id] ? (\r\n                      <>\r\n                        <IconButton onClick={() => handleExitEdit(row.id)}>\r\n                          <CancelIcon />\r\n                        </IconButton>\r\n                        <IconButton onClick={() => handleSaveRow(row.id)}>\r\n                          <SaveIcon />\r\n                        </IconButton>\r\n                      </>\r\n                    ) : (\r\n                      isSelected(row.id) && (\r\n                        <IconButton onClick={() => handleEditRow(row.id)}>\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                      )\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 15]}\r\n          component=\"div\"\r\n          count={items.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  </div>\r\n);\r\n}\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n// function Account() {\r\n// const[items,setItems] = useState([]);\r\n// useEffect(() => {\r\n//     const authToken = localStorage.getItem('authToken');\r\n//     axios\r\n//         .get('http://127.0.0.1:8000/myapp/items', {\r\n//         headers: {\r\n//             Authorization: `${authToken}`,\r\n//         },\r\n//     })\r\n//     .then((res) => {\r\n//         console.log(res.data);\r\n//         setItems(res.data);\r\n//     })\r\n//     .catch((error) => {\r\n//         console.error(error);\r\n//     });\r\n//       }, []);\r\n//   return (\r\n//     <div>\r\n//     <NavbarOption />\r\n//     <h1>My List:</h1>\r\n//     {items.map((item) => (\r\n//       <div key={item.id}>\r\n//       <ul> key={item.id} ,name:{item.item_name} Size: {item.size}, Animal: {item.animal}, Category: {item.category}, Description: {item.description}</ul>\r\n//     </div>\r\n//     ))}\r\n//   </div>\r\n//   );\r\n// }\r\n\r\n// export default Account;\r\n\r\n\r\n\r\n\r\n  // const handleSaveRow = (id) => {\r\n    // const confirmed = window.confirm('Are you sure you want to save the changes?');\r\n    //   if (confirmed) {\r\n    //     const updatedItem = items.find((item) => item.id === id);\r\n    //   if (updatedItem) {\r\n    //     console.log('Updated Item:', updatedItem);\r\n    //       const handleEditReq = async () => {\r\n    //         try {\r\n    //           const authToken = localStorage.getItem('authToken');\r\n    //           const response = await axios.put('http://127.0.0.1:8000/myapp/item', {\r\n    //             headers: {\r\n    //               Authorization: authToken,\r\n    //             },\r\n    //             data: {\r\n    //               items: updatedItem,\r\n    //             },\r\n    //           });\r\n    //           if (response.status === 204) {\r\n    //               window.location.reload();\r\n    //           } else {\r\n    //             throw new Error('Failed to change this item');\r\n    //           }\r\n    //         } catch (error) {\r\n    //           console.error(error);\r\n    //         }\r\n    //       };\r\n    //       handleEditReq();\r\n    //     }\r\n    //   }\r\n  // };\r\n\r\n  \r\n  // const handleSaveNewProduct = () => {\r\n  //   // Add the new product data to the items array\r\n  //   const newProductWithId = { ...newProduct, id: generateUniqueId() };\r\n  //   // setItems((prevItems) => [newProductWithId, ...prevItems]);\r\n  //   const handleSaveNewProduct = async () => {\r\n  //     // Add the new product data to the items array\r\n  //     const newProductWithId = { ...newProduct, id: generateUniqueId() };\r\n  //     const confirmed = window.confirm('Are you sure you want to save the changes?');\r\n    \r\n  //     if (confirmed) {\r\n  //       if (newProductWithId) {\r\n  //         try {\r\n  //           const authToken = localStorage.getItem('authToken');\r\n  //           const response = await axios.post(\r\n  //             'http://127.0.0.1:8000/myapp/items',\r\n  //             {\r\n  //               items: newProductWithId,\r\n  //             },\r\n  //             {\r\n  //               headers: {\r\n  //                 Authorization: authToken, // Pass the token directly here\r\n  //               },\r\n  //             }\r\n  //           );\r\n    \r\n  //           if (response.status === 204) {\r\n  //             setItems((prevItems) => [response.data, ...prevItems]);\r\n  //             window.location.reload();\r\n  //           } else {\r\n  //             throw new Error('Failed to change this item');\r\n  //           }\r\n  //         } catch (error) {\r\n  //           console.error(error);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     setNewProduct({}); // Reset newProduct state\r\n  //   };\r\n    \r\n    // const handleSaveNewProduct = async () => {\r\n  //   const newProductWithId = {id: generateUniqueId() ,...newProduct };\r\n  //   const confirmed = window.confirm('Are you sure you want to save the changes?');\r\n  \r\n  //   if (confirmed) {\r\n  //     if (newProductWithId) {\r\n  //       try {\r\n  //         const authToken = localStorage.getItem('authToken');\r\n  //         const response = await axios.post(\r\n  //           'http://127.0.0.1:8000/myapp/items',newProductWithId,\r\n  //           {\r\n  //             headers: {\r\n  //               Authorization: authToken, \r\n  //             },\r\n  //           }\r\n  //         );\r\n  \r\n  //         if (response.status === 201) {\r\n  //           console.log(\"this is the data:\",response.data)\r\n  //           // setItems(response.data);\r\n  //           window.location.reload();\r\n  //         } else {\r\n  //           throw new Error('Failed to change this item');\r\n  //         }\r\n  //       } catch (error) {\r\n  //         console.error(error);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   setNewProduct({}); // Reset newProduct state\r\n  // };","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\navbar.js",["80"],[],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport * as React from 'react';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\n\r\n\r\n\r\nconst Search = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  '&:hover': {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginLeft: 0,\r\n  width: '100%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(1),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: 'inherit',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nfunction NavbarOption() {\r\n  const [user, setUser] = useState('');\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [categoryOptions, setCategoryOptions] = useState([]);\r\n  const [ProfileanchorEl, setProfileanchorEl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    axios\r\n      .get('http://127.0.0.1:8000/myapp/auth', {\r\n        headers: {\r\n          Authorization: `${authToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUser(res.data.username); // Set the username in the state variable\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://127.0.0.1:8000/myapp/category-options', {\r\n    })\r\n      .then(res => {\r\n        // console.log(res.data)\r\n        setCategoryOptions(res.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n    \r\n\r\n  const navigate = useNavigate();\r\n  const profilenavigate = useNavigate();\r\n\r\n  const handleMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handlProfileMenu = (event) => {\r\n    setProfileanchorEl(event.currentTarget);\r\n  };\r\n\r\n\r\nconst handleProfileClose = () => {\r\n  setProfileanchorEl(null);\r\n};\r\n\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            sx={{ mr: 2 }}\r\n            onClick={handleMenuOpen} // Open the menu when the icon is clicked\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\r\n          >\r\n            welcome {user}\r\n          </Typography>\r\n          <Search>\r\n            <SearchIconWrapper>\r\n              <SearchIcon />\r\n            </SearchIconWrapper>\r\n            <StyledInputBase\r\n              placeholder=\"Search…\"\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </Search>\r\n          <div>\r\n              <IconButton\r\n                size=\"large\"\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handlProfileMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                ProfileanchorEl={ProfileanchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={Boolean(ProfileanchorEl)}\r\n                onClose={handleProfileClose}\r\n              > \r\n                <MenuItem onClick={() => navigate('/profile')}>profile</MenuItem>\r\n                <MenuItem onClick={() => navigate('/Myaccount')}>My account</MenuItem>\r\n                <MenuItem onClick={() => navigate('/')}>Logout</MenuItem>\r\n              </Menu>\r\n            </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* Menu component */}\r\n      <Menu\r\n      anchorEl={anchorEl}\r\n      open={Boolean(anchorEl)}\r\n      onClose={handleMenuClose}\r\n      >\r\n      {Object.entries(categoryOptions).map(([key, value]) => (\r\n      <MenuItem key={key} onClick={handleMenuClose}>\r\n      {value}\r\n      </MenuItem>\r\n       ))}\r\n    </Menu>\r\n    </Box>\r\n    \r\n  );\r\n}\r\n\r\nexport default NavbarOption;","C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\userportal.js",["81","82","83","84","85","86","87","88"],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\HomePageComponents\\about.js",[],[],"C:\\Users\\חיאל דהן\\Desktop\\AniHelp\\Frontend\\anihelp\\src\\UserPortalComps\\itemetails.js",["89"],[],{"ruleId":"90","severity":1,"message":"91","line":36,"column":1,"nodeType":"92","messageId":"93","endLine":36,"endColumn":72},{"ruleId":"90","severity":1,"message":"91","line":37,"column":1,"nodeType":"92","messageId":"93","endLine":37,"endColumn":560},{"ruleId":"94","severity":1,"message":"95","line":15,"column":9,"nodeType":"96","messageId":"97","endLine":15,"endColumn":20},{"ruleId":"94","severity":1,"message":"98","line":15,"column":22,"nodeType":"96","messageId":"97","endLine":15,"endColumn":35},{"ruleId":"94","severity":1,"message":"99","line":16,"column":9,"nodeType":"96","messageId":"97","endLine":16,"endColumn":17},{"ruleId":"94","severity":1,"message":"100","line":16,"column":19,"nodeType":"96","messageId":"97","endLine":16,"endColumn":29},{"ruleId":"94","severity":1,"message":"101","line":3,"column":20,"nodeType":"96","messageId":"97","endLine":3,"endColumn":29},{"ruleId":"94","severity":1,"message":"102","line":3,"column":31,"nodeType":"96","messageId":"97","endLine":3,"endColumn":37},{"ruleId":"94","severity":1,"message":"103","line":6,"column":10,"nodeType":"96","messageId":"97","endLine":6,"endColumn":16},{"ruleId":"94","severity":1,"message":"104","line":7,"column":7,"nodeType":"96","messageId":"97","endLine":7,"endColumn":13},{"ruleId":"94","severity":1,"message":"105","line":25,"column":8,"nodeType":"96","messageId":"97","endLine":25,"endColumn":22},{"ruleId":"94","severity":1,"message":"106","line":467,"column":9,"nodeType":"96","messageId":"97","endLine":467,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":98,"column":9,"nodeType":"96","messageId":"97","endLine":98,"endColumn":24},{"ruleId":"94","severity":1,"message":"108","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":13},{"ruleId":"94","severity":1,"message":"109","line":9,"column":8,"nodeType":"96","messageId":"97","endLine":9,"endColumn":15},{"ruleId":"94","severity":1,"message":"110","line":23,"column":8,"nodeType":"96","messageId":"97","endLine":23,"endColumn":20},{"ruleId":"94","severity":1,"message":"111","line":43,"column":8,"nodeType":"96","messageId":"97","endLine":43,"endColumn":19},{"ruleId":"94","severity":1,"message":"112","line":274,"column":15,"nodeType":"96","messageId":"97","endLine":274,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":287,"column":6,"nodeType":"115","endLine":287,"endColumn":32,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":359,"column":15,"nodeType":"119","messageId":"120","endLine":359,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":572,"column":1,"nodeType":"92","messageId":"93","endLine":574,"endColumn":18},{"ruleId":"94","severity":1,"message":"101","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":26},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'err_message' is assigned a value but never used.","Identifier","unusedVar","'setErrMessage' is assigned a value but never used.","'err_flag' is assigned a value but never used.","'setErrFlag' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Navbar' is defined but never used.","'styles' is assigned a value but never used.","'FilterListIcon' is defined but never used.","'emptyRows' is assigned a value but never used.","'profilenavigate' is assigned a value but never used.","'Stack' is defined but never used.","'Divider' is defined but never used.","'FavoriteIcon' is defined but never used.","'ItemDetails' is defined but never used.","'authToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkbox_selection' and 'checkbox_selection_2'. Either include them or remove the dependency array.","ArrayExpression",["121"],"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected",{"desc":"122","fix":"123"},"Update the dependencies array to be: [selectedCategory, filter, checkbox_selection, checkbox_selection_2]",{"range":"124","text":"125"},[9859,9885],"[selectedCategory, filter, checkbox_selection, checkbox_selection_2]"]